services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: spark_demo_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d spark_demo_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "echo stat | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Broker 1
  kafka1:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka1:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3  # Tăng số partition mặc định
      KAFKA_LOG_RETENTION_HOURS: 24  # Giữ log 24 giờ
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh --list --bootstrap-server localhost:9092"]
      interval: 15s
      timeout: 10s
      retries: 5

  # Kafka Broker 2
  kafka2:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka2
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093,PLAINTEXT_INTERNAL://kafka2:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_RETENTION_HOURS: 24
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh --list --bootstrap-server localhost:9093"]
      interval: 15s
      timeout: 10s
      retries: 5

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://admin:password@postgres:5432/spark_demo_db?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  # Kafka Exporter
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    command:
      - "--kafka.server=kafka1:29092"
      - "--kafka.server=kafka2:29093"  # Thêm cả kafka2
      - "--web.listen-address=:9308"
      - "--topic.filter=.*"
      - "--group.filter=.*"
      - "--log.level=info"
    ports:
      - "9308:9308"
    depends_on:
      - kafka1
      - kafka2
    networks:
      - app-network

  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_WEBUI_PORT=8080
      - SPARK_DAEMON_JAVA_OPTS=-javaagent:/opt/spark/exporter/jmx_prometheus_javaagent.jar=8090:/opt/spark/exporter/spark-prometheus.yaml -Djava.security.manager=allow --add-opens=java.base/java.nio=ALL-UNNAMED --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
    volumes:
      - ./spark/metrics.properties:/opt/spark/conf/metrics.properties
      - ./monitoring/jmx_prometheus_javaagent.jar:/opt/spark/exporter/jmx_prometheus_javaagent.jar
      - ./monitoring/spark-prometheus.yaml:/opt/spark/exporter/spark-prometheus.yaml
    ports:
      - "8082:8080"   # Web UI
      - "7077:7077"   # Spark master port
      - "8090:8090"   # Prometheus exporter port
    deploy:
      resources:
        limits:
          memory: 2g
    depends_on:
      - kafka1
      - kafka2
    networks:
      - app-network


  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_WEBUI_PORT=8081
      - SPARK_DAEMON_JAVA_OPTS=-javaagent:/opt/spark/exporter/jmx_prometheus_javaagent.jar=8090:/opt/spark/exporter/spark-prometheus.yaml -Djava.security.manager=allow --add-opens=java.base/java.nio=ALL-UNNAMED --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
    volumes:
      - ./spark/metrics.properties:/opt/spark/conf/metrics.properties
      - ./monitoring/jmx_prometheus_javaagent.jar:/opt/spark/exporter/jmx_prometheus_javaagent.jar
      - ./monitoring/spark-prometheus.yaml:/opt/spark/exporter/spark-prometheus.yaml
    ports:
      - "8081:8081"
      - "8091:8091"
    deploy:
      resources:
        limits:
          memory: 2g
    networks:
      - app-network

  # Data Generator
  data-generator:
    image: python:3.9-slim
    container_name: data-generator
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts
    command: >
      sh -c "pip install psycopg2-binary && python /scripts/generate_data.py"
    networks:
      - app-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - postgres-exporter
      - kafka-exporter
      - spark-master
      - spark-worker
    networks:
      - app-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - app-network

volumes:
  postgres-data:
  grafana-data:

networks:
  app-network:
    driver: bridge